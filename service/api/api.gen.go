// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ActivityOnDate defines model for activityOnDate.
type ActivityOnDate struct {
	Count *float32            `json:"count,omitempty"`
	Date  *openapi_types.Date `json:"date,omitempty"`
}

// Bookmark defines model for bookmark.
type Bookmark struct {
	CreatedAt   time.Time    `json:"createdAt"`
	CreatedBy   *string      `json:"createdBy,omitempty"`
	FaviconUrl  *string      `json:"faviconUrl,omitempty"`
	PageContent *PageContent `json:"pageContent,omitempty"`
	ShortId     string       `json:"shortId"`
	Tags        *[]string    `json:"tags,omitempty"`
	Title       *string      `json:"title,omitempty"`
	UpdatedAt   time.Time    `json:"updatedAt"`
	UpdatedBy   *string      `json:"updatedBy,omitempty"`
	Url         string       `json:"url"`
}

// BookmarkInput defines model for bookmarkInput.
type BookmarkInput struct {
	Tags  *[]string `json:"tags,omitempty"`
	Title *string   `json:"title,omitempty"`
	Url   string    `json:"url"`
}

// BookmarkSearchResult defines model for bookmarkSearchResult.
type BookmarkSearchResult struct {
	Items *[]Bookmark     `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// Insights defines model for insights.
type Insights struct {
	ActivityGraph     *[]ActivityOnDate     `json:"activityGraph,omitempty"`
	LastVisited       *[]VisitingStatistics `json:"lastVisited,omitempty"`
	MostVisited       *[]MostVisited        `json:"mostVisited,omitempty"`
	NumberOfBookmarks *float32              `json:"numberOfBookmarks,omitempty"`
	NumberOfNotes     *float32              `json:"numberOfNotes,omitempty"`
}

// MostVisited defines model for mostVisited.
type MostVisited struct {
	Count    *float32 `json:"count,omitempty"`
	Id       *string  `json:"id,omitempty"`
	Name     *string  `json:"name,omitempty"`
	Title    *string  `json:"title,omitempty"`
	Typename *string  `json:"typename,omitempty"`
}

// Note defines model for note.
type Note struct {
	ChangesCount *int            `json:"changesCount,omitempty"`
	Content      *string         `json:"content,omitempty"`
	CreatedAt    *string         `json:"createdAt,omitempty"`
	CreatedBy    *string         `json:"createdBy,omitempty"`
	HasDraft     *bool           `json:"hasDraft,omitempty"`
	References   *NoteReferences `json:"references,omitempty"`
	ShortId      *string         `json:"shortId,omitempty"`
	Tags         *[]string       `json:"tags,omitempty"`
	Title        *string         `json:"title,omitempty"`
	UpdatedAt    *string         `json:"updatedAt,omitempty"`
	UpdatedBy    *string         `json:"updatedBy,omitempty"`
}

// NoteChange defines model for noteChange.
type NoteChange struct {
	Change    *string `json:"change,omitempty"`
	NoteId    *string `json:"noteId,omitempty"`
	ShortId   *string `json:"shortId,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// NoteInput defines model for noteInput.
type NoteInput struct {
	Content *string   `json:"content,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Title   *string   `json:"title,omitempty"`
}

// NoteLite defines model for noteLite.
type NoteLite struct {
	ShortId *string `json:"shortId,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// NoteReferenceLink defines model for noteReferenceLink.
type NoteReferenceLink struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// NoteReferences defines model for noteReferences.
type NoteReferences struct {
	Links *[]NoteReferenceLink `json:"links,omitempty"`
	Meta  *PaginationMeta      `json:"meta,omitempty"`
	Nodes *[]NoteLite          `json:"nodes,omitempty"`
}

// NoteSearchResult defines model for noteSearchResult.
type NoteSearchResult struct {
	Items *[]Note         `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// NotesChangesResult defines model for notesChangesResult.
type NotesChangesResult struct {
	Items *[]NoteChange   `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// PageContent defines model for pageContent.
type PageContent struct {
	Author    *string `json:"author,omitempty"`
	Favicon   *string `json:"favicon,omitempty"`
	Image     *string `json:"image,omitempty"`
	Length    *int    `json:"length,omitempty"`
	MdContent *string `json:"mdContent,omitempty"`
	SiteName  *string `json:"siteName,omitempty"`
	Title     *string `json:"title,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// PaginationMeta defines model for paginationMeta.
type PaginationMeta struct {
	Count         *int    `json:"count,omitempty"`
	HasNextPage   *bool   `json:"hasNextPage,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Range         *string `json:"range,omitempty"`
	SortBy        *string `json:"sortBy,omitempty"`
	SortDirection *string `json:"sortDirection,omitempty"`
}

// Tag defines model for tag.
type Tag struct {
	Frequency    *int    `json:"frequency,omitempty"`
	TypeOfParent *string `json:"typeOfParent,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// User defines model for user.
type User struct {
	CreatedAt   *string `json:"createdAt,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Email       *string `json:"email,omitempty"`
	FirstName   *string `json:"firstName,omitempty"`
	Language    *string `json:"language,omitempty"`
	LastName    *string `json:"lastName,omitempty"`
	ShortId     *string `json:"shortId,omitempty"`
	Theme       *string `json:"theme,omitempty"`
}

// UserActivity defines model for userActivity.
type UserActivity struct {
	Action       *string `json:"action,omitempty"`
	ClientId     *string `json:"clientId,omitempty"`
	ObjectId     *string `json:"objectId,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// UserActivityResult defines model for userActivityResult.
type UserActivityResult struct {
	Items *[]UserActivity `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// UserInput defines model for userInput.
type UserInput struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Email     *string `json:"email,omitempty"`
	Fullname  *string `json:"fullname,omitempty"`
	Language  *string `json:"language,omitempty"`
	Theme     *string `json:"theme,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// VisitingStatistics defines model for visitingStatistics.
type VisitingStatistics struct {
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Title    *string `json:"title,omitempty"`
	Typename *string `json:"typename,omitempty"`
}

// GetBookmarksParams defines parameters for GetBookmarks.
type GetBookmarksParams struct {
	Q             *string   `form:"q,omitempty" json:"q,omitempty"`
	Page          *int      `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int      `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string   `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string   `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Tags          *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetNotesParams defines parameters for GetNotes.
type GetNotesParams struct {
	Q             *string   `form:"q,omitempty" json:"q,omitempty"`
	Page          *int      `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int      `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string   `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string   `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Tags          *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetNoteParams defines parameters for GetNote.
type GetNoteParams struct {
	LoadDraft     *bool `form:"loadDraft,omitempty" json:"loadDraft,omitempty"`
	GetReferences *bool `form:"getReferences,omitempty" json:"getReferences,omitempty"`
	GetChanges    *bool `form:"getChanges,omitempty" json:"getChanges,omitempty"`
}

// GetNotesChangesParams defines parameters for GetNotesChanges.
type GetNotesChangesParams struct {
	Page     *int `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// GetUserActivityParams defines parameters for GetUserActivity.
type GetUserActivityParams struct {
	Page          *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// CreateBookmarkJSONRequestBody defines body for CreateBookmark for application/json ContentType.
type CreateBookmarkJSONRequestBody = BookmarkInput

// UpdateBookmarkJSONRequestBody defines body for UpdateBookmark for application/json ContentType.
type UpdateBookmarkJSONRequestBody = BookmarkInput

// CreateNoteJSONRequestBody defines body for CreateNote for application/json ContentType.
type CreateNoteJSONRequestBody = NoteInput

// UpdateNoteJSONRequestBody defines body for UpdateNote for application/json ContentType.
type UpdateNoteJSONRequestBody = NoteInput

// SaveNoteDraftJSONRequestBody defines body for SaveNoteDraft for application/json ContentType.
type SaveNoteDraftJSONRequestBody = NoteInput

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List bookmarks
	// (GET /api/v1/bookmarks)
	GetBookmarks(w http.ResponseWriter, r *http.Request, params GetBookmarksParams)
	// Create a new bookmark
	// (POST /api/v1/bookmarks)
	CreateBookmark(w http.ResponseWriter, r *http.Request)
	// Delete a bookmark by shortId
	// (DELETE /api/v1/bookmarks/{shortId})
	DeleteBookmark(w http.ResponseWriter, r *http.Request, shortId string)
	// Get a bookmark by shortId
	// (GET /api/v1/bookmarks/{shortId})
	GetBookmark(w http.ResponseWriter, r *http.Request, shortId string)
	// Update a bookmark by shortId
	// (PUT /api/v1/bookmarks/{shortId})
	UpdateBookmark(w http.ResponseWriter, r *http.Request, shortId string)
	// List notes
	// (GET /api/v1/notes)
	GetNotes(w http.ResponseWriter, r *http.Request, params GetNotesParams)
	// Create a new note
	// (POST /api/v1/notes)
	CreateNote(w http.ResponseWriter, r *http.Request)
	// Delete a note by shortId
	// (DELETE /api/v1/notes/{shortId})
	DeleteNote(w http.ResponseWriter, r *http.Request, shortId string)
	// Get a note by shortId
	// (GET /api/v1/notes/{shortId})
	GetNote(w http.ResponseWriter, r *http.Request, shortId string, params GetNoteParams)
	// Update a note by shortId
	// (PUT /api/v1/notes/{shortId})
	UpdateNote(w http.ResponseWriter, r *http.Request, shortId string)
	// Brings a list of changes on a note
	// (GET /api/v1/notes/{shortId}/changes)
	GetNotesChanges(w http.ResponseWriter, r *http.Request, shortId string, params GetNotesChangesParams)
	// Brings a change on a note
	// (GET /api/v1/notes/{shortId}/changes/{changeShortId})
	GetNotesChange(w http.ResponseWriter, r *http.Request, shortId string, changeShortId string)
	// Delete a notes draft by note shortId
	// (DELETE /api/v1/notes/{shortId}/draft)
	DeleteNoteDraft(w http.ResponseWriter, r *http.Request, shortId string)
	// Save draft of a note by notes shortId
	// (PUT /api/v1/notes/{shortId}/draft)
	SaveNoteDraft(w http.ResponseWriter, r *http.Request, shortId string)
	// Get tags
	// (GET /api/v1/tags)
	GetTags(w http.ResponseWriter, r *http.Request, params GetTagsParams)
	// Get a user by ID
	// (GET /api/v1/users/{shortId})
	GetUser(w http.ResponseWriter, r *http.Request, shortId string)
	// Update a user by ID
	// (PUT /api/v1/users/{shortId})
	UpdateUser(w http.ResponseWriter, r *http.Request, shortId string)
	// Get user activity
	// (GET /api/v1/users/{shortId}/activity)
	GetUserActivity(w http.ResponseWriter, r *http.Request, shortId string, params GetUserActivityParams)
	// Get dashboard insights
	// (GET /api/v1/users/{shortId}/insights)
	GetInsights(w http.ResponseWriter, r *http.Request, shortId string)
	// Connect to websocket
	// (GET /api/v1/ws/{user})
	ConnectWs(w http.ResponseWriter, r *http.Request, user string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBookmarks operation middleware
func (siw *ServerInterfaceWrapper) GetBookmarks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBookmarksParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBookmarks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBookmark operation middleware
func (siw *ServerInterfaceWrapper) CreateBookmark(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBookmark(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBookmark operation middleware
func (siw *ServerInterfaceWrapper) DeleteBookmark(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBookmark(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBookmark operation middleware
func (siw *ServerInterfaceWrapper) GetBookmark(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBookmark(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateBookmark operation middleware
func (siw *ServerInterfaceWrapper) UpdateBookmark(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBookmark(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNotes operation middleware
func (siw *ServerInterfaceWrapper) GetNotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNote operation middleware
func (siw *ServerInterfaceWrapper) CreateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNote(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNote(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNote operation middleware
func (siw *ServerInterfaceWrapper) GetNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNoteParams

	// ------------- Optional query parameter "loadDraft" -------------

	err = runtime.BindQueryParameter("form", true, false, "loadDraft", r.URL.Query(), &params.LoadDraft)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "loadDraft", Err: err})
		return
	}

	// ------------- Optional query parameter "getReferences" -------------

	err = runtime.BindQueryParameter("form", true, false, "getReferences", r.URL.Query(), &params.GetReferences)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "getReferences", Err: err})
		return
	}

	// ------------- Optional query parameter "getChanges" -------------

	err = runtime.BindQueryParameter("form", true, false, "getChanges", r.URL.Query(), &params.GetChanges)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "getChanges", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNote(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNote(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNotesChanges operation middleware
func (siw *ServerInterfaceWrapper) GetNotesChanges(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotesChangesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotesChanges(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNotesChange operation middleware
func (siw *ServerInterfaceWrapper) GetNotesChange(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// ------------- Path parameter "changeShortId" -------------
	var changeShortId string

	err = runtime.BindStyledParameterWithOptions("simple", "changeShortId", mux.Vars(r)["changeShortId"], &changeShortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "changeShortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotesChange(w, r, shortId, changeShortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNoteDraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteNoteDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNoteDraft(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SaveNoteDraft operation middleware
func (siw *ServerInterfaceWrapper) SaveNoteDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SaveNoteDraft(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserActivity operation middleware
func (siw *ServerInterfaceWrapper) GetUserActivity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserActivityParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserActivity(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInsights operation middleware
func (siw *ServerInterfaceWrapper) GetInsights(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", mux.Vars(r)["shortId"], &shortId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInsights(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ConnectWs operation middleware
func (siw *ServerInterfaceWrapper) ConnectWs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameterWithOptions("simple", "user", mux.Vars(r)["user"], &user, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConnectWs(w, r, user)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/v1/bookmarks", wrapper.GetBookmarks).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/bookmarks", wrapper.CreateBookmark).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/v1/bookmarks/{shortId}", wrapper.DeleteBookmark).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/v1/bookmarks/{shortId}", wrapper.GetBookmark).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/bookmarks/{shortId}", wrapper.UpdateBookmark).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/v1/notes", wrapper.GetNotes).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/notes", wrapper.CreateNote).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.DeleteNote).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.GetNote).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.UpdateNote).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}/changes", wrapper.GetNotesChanges).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}/changes/{changeShortId}", wrapper.GetNotesChange).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}/draft", wrapper.DeleteNoteDraft).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{shortId}/draft", wrapper.SaveNoteDraft).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/v1/tags", wrapper.GetTags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{shortId}", wrapper.GetUser).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{shortId}", wrapper.UpdateUser).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{shortId}/activity", wrapper.GetUserActivity).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{shortId}/insights", wrapper.GetInsights).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/ws/{user}", wrapper.ConnectWs).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
