// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// ActivityOnDate defines model for activityOnDate.
type ActivityOnDate struct {
	Count *int    `json:"count,omitempty"`
	Date  *string `json:"date,omitempty"`
}

// ContentOnDashboard defines model for contentOnDashboard.
type ContentOnDashboard struct {
	Count *int    `json:"count,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Dashboard defines model for dashboard.
type Dashboard struct {
	ActivityGraph *[]ActivityOnDate     `json:"activityGraph,omitempty"`
	LastVisited   *[]ContentOnDashboard `json:"lastVisited,omitempty"`
	MostVisited   *[]ContentOnDashboard `json:"mostVisited,omitempty"`
	NumberOfNotes *int                  `json:"numberOfNotes,omitempty"`
}

// Note defines model for note.
type Note struct {
	Content    *string         `json:"content,omitempty"`
	CreatedAt  *string         `json:"createdAt,omitempty"`
	CreatedBy  *User           `json:"createdBy,omitempty"`
	HasDraft   *bool           `json:"hasDraft,omitempty"`
	Id         *string         `json:"id,omitempty"`
	References *NoteReferences `json:"references,omitempty"`
	Tags       *[]string       `json:"tags,omitempty"`
	Title      *string         `json:"title,omitempty"`
	UpdatedAt  *string         `json:"updatedAt,omitempty"`
	UpdatedBy  *User           `json:"updatedBy,omitempty"`
}

// NoteInput defines model for noteInput.
type NoteInput struct {
	Content *string   `json:"content,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Title   *string   `json:"title,omitempty"`
}

// NoteLite defines model for noteLite.
type NoteLite struct {
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NoteReferenceLink defines model for noteReferenceLink.
type NoteReferenceLink struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// NoteReferences defines model for noteReferences.
type NoteReferences struct {
	Links *[]NoteReferenceLink `json:"links,omitempty"`
	Meta  *PaginationMeta      `json:"meta,omitempty"`
	Nodes *[]NoteLite          `json:"nodes,omitempty"`
}

// NoteSearchResult defines model for noteSearchResult.
type NoteSearchResult struct {
	Items *[]Note         `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// PaginationMeta defines model for paginationMeta.
type PaginationMeta struct {
	Count         *int    `json:"count,omitempty"`
	HasNextPage   *bool   `json:"hasNextPage,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Range         *string `json:"range,omitempty"`
	SortBy        *string `json:"sortBy,omitempty"`
	SortDirection *string `json:"sortDirection,omitempty"`
}

// Tag defines model for tag.
type Tag struct {
	Frequency    *int    `json:"frequency,omitempty"`
	TypeOfParent *string `json:"typeOfParent,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// User defines model for user.
type User struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Email     *string `json:"email,omitempty"`
	Fullname  *string `json:"fullname,omitempty"`
	Id        *string `json:"id,omitempty"`
	Language  *string `json:"language,omitempty"`
	Theme     *string `json:"theme,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// UserActivity defines model for userActivity.
type UserActivity struct {
	Action       *string `json:"action,omitempty"`
	ClientId     *string `json:"clientId,omitempty"`
	ObjectId     *string `json:"objectId,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// UserActivityResult defines model for userActivityResult.
type UserActivityResult struct {
	Items *[]UserActivity `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// GetApiV1NotesParams defines parameters for GetApiV1Notes.
type GetApiV1NotesParams struct {
	Q             *string   `form:"q,omitempty" json:"q,omitempty"`
	Page          *int      `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int      `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string   `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string   `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Tags          *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetApiV1NotesIdParams defines parameters for GetApiV1NotesId.
type GetApiV1NotesIdParams struct {
	LoadDraft      *bool `form:"loadDraft,omitempty" json:"loadDraft,omitempty"`
	OptOutTracking *bool `form:"optOutTracking,omitempty" json:"optOutTracking,omitempty"`
}

// GetApiV1TagsParams defines parameters for GetApiV1Tags.
type GetApiV1TagsParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1UsersIdActivityParams defines parameters for GetApiV1UsersIdActivity.
type GetApiV1UsersIdActivityParams struct {
	Page          *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// PutApiV1NoteIdDraftJSONRequestBody defines body for PutApiV1NoteIdDraft for application/json ContentType.
type PutApiV1NoteIdDraftJSONRequestBody = NoteInput

// PostApiV1NotesJSONRequestBody defines body for PostApiV1Notes for application/json ContentType.
type PostApiV1NotesJSONRequestBody = NoteInput

// PutApiV1NotesIdJSONRequestBody defines body for PutApiV1NotesId for application/json ContentType.
type PutApiV1NotesIdJSONRequestBody = NoteInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the authenticated user
	// (GET /api/v1/me)
	GetApiV1Me(w http.ResponseWriter, r *http.Request)
	// Delete a notes draft by note id
	// (DELETE /api/v1/note/{id}/draft)
	DeleteApiV1NoteIdDraft(w http.ResponseWriter, r *http.Request, id string)
	// Save draft of a note by notes id
	// (PUT /api/v1/note/{id}/draft)
	PutApiV1NoteIdDraft(w http.ResponseWriter, r *http.Request, id string)
	// List notes
	// (GET /api/v1/notes)
	GetApiV1Notes(w http.ResponseWriter, r *http.Request, params GetApiV1NotesParams)
	// Create a new note
	// (POST /api/v1/notes)
	PostApiV1Notes(w http.ResponseWriter, r *http.Request)
	// Delete a note by ID
	// (DELETE /api/v1/notes/{id})
	DeleteApiV1NotesId(w http.ResponseWriter, r *http.Request, id string)
	// Get a note by ID
	// (GET /api/v1/notes/{id})
	GetApiV1NotesId(w http.ResponseWriter, r *http.Request, id string, params GetApiV1NotesIdParams)
	// Update a note by ID
	// (PUT /api/v1/notes/{id})
	PutApiV1NotesId(w http.ResponseWriter, r *http.Request, id string)
	// Get tags
	// (GET /api/v1/tags)
	GetApiV1Tags(w http.ResponseWriter, r *http.Request, params GetApiV1TagsParams)
	// Get a user by ID
	// (GET /api/v1/users/{id})
	GetApiV1UsersId(w http.ResponseWriter, r *http.Request, id string)
	// Get user activity
	// (GET /api/v1/users/{id}/activity)
	GetApiV1UsersIdActivity(w http.ResponseWriter, r *http.Request, id string, params GetApiV1UsersIdActivityParams)
	// Get dashboard insights
	// (GET /api/v1/users/{id}/insights)
	GetApiV1UsersIdInsights(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Me operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Me(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Me(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1NoteIdDraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1NoteIdDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1NoteIdDraft(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1NoteIdDraft operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1NoteIdDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1NoteIdDraft(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Notes operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Notes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1NotesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Notes(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1Notes operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Notes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Notes(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1NotesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1NotesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1NotesId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1NotesId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1NotesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1NotesIdParams

	// ------------- Optional query parameter "loadDraft" -------------

	err = runtime.BindQueryParameter("form", true, false, "loadDraft", r.URL.Query(), &params.LoadDraft)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "loadDraft", Err: err})
		return
	}

	// ------------- Optional query parameter "optOutTracking" -------------

	err = runtime.BindQueryParameter("form", true, false, "optOutTracking", r.URL.Query(), &params.OptOutTracking)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "optOutTracking", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1NotesId(w, r, id, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1NotesId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1NotesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1NotesId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Tags operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Tags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1TagsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Tags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersIdActivity operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersIdActivity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1UsersIdActivityParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersIdActivity(w, r, id, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersIdInsights operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersIdInsights(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersIdInsights(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/v1/me", wrapper.GetApiV1Me).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/note/{id}/draft", wrapper.DeleteApiV1NoteIdDraft).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/v1/note/{id}/draft", wrapper.PutApiV1NoteIdDraft).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/v1/notes", wrapper.GetApiV1Notes).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/notes", wrapper.PostApiV1Notes).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{id}", wrapper.DeleteApiV1NotesId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{id}", wrapper.GetApiV1NotesId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/notes/{id}", wrapper.PutApiV1NotesId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/v1/tags", wrapper.GetApiV1Tags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{id}", wrapper.GetApiV1UsersId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{id}/activity", wrapper.GetApiV1UsersIdActivity).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/users/{id}/insights", wrapper.GetApiV1UsersIdInsights).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZTW/bOBD9KwR3j4aVbm85bboBCgNtUzRpD7voYSyNJTYSyZBDZ9XA/31BSv6SKVtR",
	"k6Ld3mJ+DefNm5lH5YGnqtJKoiTLzx+4TQusIPwJKYmloPpKXgKhH9FGaTQkMMynyknyf1CtkZ9zIQlz",
	"NHw14Vm7oZ2xZITM+Wo1WY+o+RdMyS9NlSSU5I3YYq7AZI+y1IwMspT1G1i7+tqALvyAIKzCzO8GF/yc",
	"/5ZsYUpajJIOQFubYAzU/ncJlj4JKwizwadGAImcXKnnOlm6ao7mavFOUQNOF/QYtlLFGRIMRuIz4alB",
	"IMwujs6+qk/55GzDgwLspYHF7mlzpUoE6WdFFrVicIEGZYonofP+fdiu9hBAbveQPzi9CywJKjG60uns",
	"CBbt7FAs+sIzk9rR42L0dD72XeqNiPGmJ1yPPXwTsDdC3h5ascqZFHscNznSGFP20E4p5K0dnKSHF49l",
	"PxKcOkhDLiSQUPKtXx0umuHjLhLCc2C/D4RrBJMWH9C6MkK0jdHB1p/K89h9O2se03IKsO/wX3oPOcar",
	"jd6f2dnqZ67F155ZAzKP89EqQ03+R6cuhcHU+zKQsQT5occLg3cOZVr3N9qrxXswfcViCaUbmp2hUh1i",
	"frQlYAWijM4sXFlKqOLQ9dSSEmTuoAduKrDnNH/xHlN9fl60KiGuOqIxm/C0FChpFr97c/6sr6c1de0m",
	"Lox8Fa3QElR6hA9Pk9t7qDxbjvshIRdq3eQgDRdvacSh1GhuRZmKP3M/NE1VFVQi2tQI3USGX5kcpPiK",
	"rFbOMCqUywuybF6zeyNIyJz5QmUnzOlSQeYHFqL0AxaW/tdcqdsKzK1lIDNmQ4X04whWlDVTkoGsWYZL",
	"kSK7F1QwYHOj7i2aKeMTXooUpQ2RbHjH385u+IQ7450oiLQ9TxKlUTZhnyqTJ+2mpBKU7DROflMg+9uV",
	"wC605hO+RGMbN19Mz6ZngVoaJWjBz/nL6dn0Jfcli4oQ0QS0SJYvkob8bXv0JAhR8Gzkr5EutPj04i3y",
	"QEStpG0I8sfZWUdsgNalSMPe5Itt0qAJ7kCZcxCra5emaO3ClWxtO/DCuqoCUzf3Y1QgA0cFSvLmMWMb",
	"2bT20Ic0eRDZKsnWkjLDEhulsu/xZRgPTnu9PMsaEephM1AhobH8/J8HLvwFPZR8so6jyAJId04Yr+HJ",
	"OJzsINDNzM/fiGi3TY3Br/GWQUN6FtDxueB/MhFeE63G3EfpvaPvBtGdQ0uvVFY/Gd+24jmAtn+f1Q8Q",
	"lmtYYhsMtWijsw6LDXHpkNuezODm8ReP0Z1DU2+DdMePxWQS3xQkUmTfziOzf2NQUGM2tzJqxH33VdaI",
	"A8JTanff0DfVNyf+KWrvqfZR/HsjLDVkCxVA2VgJUHafWT9dpp5+rYzB7q+geX3S4j1rj+kka2hFj2hC",
	"dpb9Eg3Il7jZpafc6VL2PJD05LpXgusmd8T/nt1K05WjGwPprbdy9IjPPySnvczqhuikLnhO1v6CmuBj",
	"+GjYCcNOZVl/2juaOjdN0xogAsKVR6TKcfHwrfQe9BoliHXdsa8Lj9guzv5xsa3gR9H+6Jf+mLX7+Z5j",
	"EJ5fEYJugdv8n2UogptvC9+v5P9/9exzU6fzaWk0kQKNNkzpYZKQVuQF2aFMmq3X/2Q5uf1X52g8N0ew",
	"DWir1Wr1XwAAAP//6RlbTTAeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
