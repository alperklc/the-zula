// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ActivityOnDate defines model for activityOnDate.
type ActivityOnDate struct {
	Count *int    `json:"count,omitempty"`
	Date  *string `json:"date,omitempty"`
}

// ContentOnDashboard defines model for contentOnDashboard.
type ContentOnDashboard struct {
	Count *int    `json:"count,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Dashboard defines model for dashboard.
type Dashboard struct {
	ActivityGraph *[]ActivityOnDate     `json:"activityGraph,omitempty"`
	LastVisited   *[]ContentOnDashboard `json:"lastVisited,omitempty"`
	MostVisited   *[]ContentOnDashboard `json:"mostVisited,omitempty"`
	NumberOfNotes *int                  `json:"numberOfNotes,omitempty"`
}

// Note defines model for note.
type Note struct {
	Content    *string         `json:"content,omitempty"`
	CreatedAt  *string         `json:"createdAt,omitempty"`
	CreatedBy  *User           `json:"createdBy,omitempty"`
	HasDraft   *bool           `json:"hasDraft,omitempty"`
	References *NoteReferences `json:"references,omitempty"`
	ShortId    *string         `json:"shortId,omitempty"`
	Tags       *[]string       `json:"tags,omitempty"`
	Title      *string         `json:"title,omitempty"`
	UpdatedAt  *string         `json:"updatedAt,omitempty"`
	UpdatedBy  *User           `json:"updatedBy,omitempty"`
}

// NoteInput defines model for noteInput.
type NoteInput struct {
	Content *string   `json:"content,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Title   *string   `json:"title,omitempty"`
}

// NoteLite defines model for noteLite.
type NoteLite struct {
	ShortId *string `json:"shortId,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// NoteReferenceLink defines model for noteReferenceLink.
type NoteReferenceLink struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// NoteReferences defines model for noteReferences.
type NoteReferences struct {
	Links *[]NoteReferenceLink `json:"links,omitempty"`
	Meta  *PaginationMeta      `json:"meta,omitempty"`
	Nodes *[]NoteLite          `json:"nodes,omitempty"`
}

// NoteSearchResult defines model for noteSearchResult.
type NoteSearchResult struct {
	Items *[]Note         `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// PaginationMeta defines model for paginationMeta.
type PaginationMeta struct {
	Count         *int    `json:"count,omitempty"`
	HasNextPage   *bool   `json:"hasNextPage,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Range         *string `json:"range,omitempty"`
	SortBy        *string `json:"sortBy,omitempty"`
	SortDirection *string `json:"sortDirection,omitempty"`
}

// Tag defines model for tag.
type Tag struct {
	Frequency    *int    `json:"frequency,omitempty"`
	TypeOfParent *string `json:"typeOfParent,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// User defines model for user.
type User struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Email     *string `json:"email,omitempty"`
	Fullname  *string `json:"fullname,omitempty"`
	Language  *string `json:"language,omitempty"`
	ShortId   *string `json:"shortId,omitempty"`
	Theme     *string `json:"theme,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// UserActivity defines model for userActivity.
type UserActivity struct {
	Action       *string `json:"action,omitempty"`
	ClientId     *string `json:"clientId,omitempty"`
	ObjectId     *string `json:"objectId,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// UserActivityResult defines model for userActivityResult.
type UserActivityResult struct {
	Items *[]UserActivity `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// GetApiV1NotesParams defines parameters for GetApiV1Notes.
type GetApiV1NotesParams struct {
	Q             *string   `form:"q,omitempty" json:"q,omitempty"`
	Page          *int      `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int      `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string   `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string   `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Tags          *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetApiV1NotesShortIdParams defines parameters for GetApiV1NotesShortId.
type GetApiV1NotesShortIdParams struct {
	LoadDraft      *bool `form:"loadDraft,omitempty" json:"loadDraft,omitempty"`
	OptOutTracking *bool `form:"optOutTracking,omitempty" json:"optOutTracking,omitempty"`
}

// GetApiV1TagsParams defines parameters for GetApiV1Tags.
type GetApiV1TagsParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// GetApiV1UsersShortIdActivityParams defines parameters for GetApiV1UsersShortIdActivity.
type GetApiV1UsersShortIdActivityParams struct {
	Page          *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// PutApiV1NoteShortIdDraftJSONRequestBody defines body for PutApiV1NoteShortIdDraft for application/json ContentType.
type PutApiV1NoteShortIdDraftJSONRequestBody = NoteInput

// PostApiV1NotesJSONRequestBody defines body for PostApiV1Notes for application/json ContentType.
type PostApiV1NotesJSONRequestBody = NoteInput

// PutApiV1NotesShortIdJSONRequestBody defines body for PutApiV1NotesShortId for application/json ContentType.
type PutApiV1NotesShortIdJSONRequestBody = NoteInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the authenticated user
	// (GET /api/v1/me)
	GetApiV1Me(w http.ResponseWriter, r *http.Request)
	// Delete a notes draft by note shortId
	// (DELETE /api/v1/note/{shortId}/draft)
	DeleteApiV1NoteShortIdDraft(w http.ResponseWriter, r *http.Request, shortId string)
	// Save draft of a note by notes shortId
	// (PUT /api/v1/note/{shortId}/draft)
	PutApiV1NoteShortIdDraft(w http.ResponseWriter, r *http.Request, shortId string)
	// List notes
	// (GET /api/v1/notes)
	GetApiV1Notes(w http.ResponseWriter, r *http.Request, params GetApiV1NotesParams)
	// Create a new note
	// (POST /api/v1/notes)
	PostApiV1Notes(w http.ResponseWriter, r *http.Request)
	// Delete a note by shortId
	// (DELETE /api/v1/notes/{shortId})
	DeleteApiV1NotesShortId(w http.ResponseWriter, r *http.Request, shortId string)
	// Get a note by shortId
	// (GET /api/v1/notes/{shortId})
	GetApiV1NotesShortId(w http.ResponseWriter, r *http.Request, shortId string, params GetApiV1NotesShortIdParams)
	// Update a note by shortId
	// (PUT /api/v1/notes/{shortId})
	PutApiV1NotesShortId(w http.ResponseWriter, r *http.Request, shortId string)
	// Get tags
	// (GET /api/v1/tags)
	GetApiV1Tags(w http.ResponseWriter, r *http.Request, params GetApiV1TagsParams)
	// Get a user by ID
	// (GET /api/v1/users/{shortId})
	GetApiV1UsersShortId(w http.ResponseWriter, r *http.Request, shortId string)
	// Get user activity
	// (GET /api/v1/users/{shortId}/activity)
	GetApiV1UsersShortIdActivity(w http.ResponseWriter, r *http.Request, shortId string, params GetApiV1UsersShortIdActivityParams)
	// Get dashboard insights
	// (GET /api/v1/users/{shortId}/insights)
	GetApiV1UsersShortIdInsights(w http.ResponseWriter, r *http.Request, shortId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get the authenticated user
// (GET /api/v1/me)
func (_ Unimplemented) GetApiV1Me(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notes draft by note shortId
// (DELETE /api/v1/note/{shortId}/draft)
func (_ Unimplemented) DeleteApiV1NoteShortIdDraft(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Save draft of a note by notes shortId
// (PUT /api/v1/note/{shortId}/draft)
func (_ Unimplemented) PutApiV1NoteShortIdDraft(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notes
// (GET /api/v1/notes)
func (_ Unimplemented) GetApiV1Notes(w http.ResponseWriter, r *http.Request, params GetApiV1NotesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new note
// (POST /api/v1/notes)
func (_ Unimplemented) PostApiV1Notes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a note by shortId
// (DELETE /api/v1/notes/{shortId})
func (_ Unimplemented) DeleteApiV1NotesShortId(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a note by shortId
// (GET /api/v1/notes/{shortId})
func (_ Unimplemented) GetApiV1NotesShortId(w http.ResponseWriter, r *http.Request, shortId string, params GetApiV1NotesShortIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a note by shortId
// (PUT /api/v1/notes/{shortId})
func (_ Unimplemented) PutApiV1NotesShortId(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tags
// (GET /api/v1/tags)
func (_ Unimplemented) GetApiV1Tags(w http.ResponseWriter, r *http.Request, params GetApiV1TagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user by ID
// (GET /api/v1/users/{shortId})
func (_ Unimplemented) GetApiV1UsersShortId(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user activity
// (GET /api/v1/users/{shortId}/activity)
func (_ Unimplemented) GetApiV1UsersShortIdActivity(w http.ResponseWriter, r *http.Request, shortId string, params GetApiV1UsersShortIdActivityParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get dashboard insights
// (GET /api/v1/users/{shortId}/insights)
func (_ Unimplemented) GetApiV1UsersShortIdInsights(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Me operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Me(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Me(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1NoteShortIdDraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1NoteShortIdDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1NoteShortIdDraft(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1NoteShortIdDraft operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1NoteShortIdDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1NoteShortIdDraft(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Notes operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Notes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1NotesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Notes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1Notes operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Notes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Notes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1NotesShortId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1NotesShortId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1NotesShortId(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1NotesShortId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1NotesShortId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1NotesShortIdParams

	// ------------- Optional query parameter "loadDraft" -------------

	err = runtime.BindQueryParameter("form", true, false, "loadDraft", r.URL.Query(), &params.LoadDraft)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "loadDraft", Err: err})
		return
	}

	// ------------- Optional query parameter "optOutTracking" -------------

	err = runtime.BindQueryParameter("form", true, false, "optOutTracking", r.URL.Query(), &params.OptOutTracking)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "optOutTracking", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1NotesShortId(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1NotesShortId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1NotesShortId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1NotesShortId(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Tags operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Tags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1TagsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Tags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersShortId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersShortId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersShortId(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersShortIdActivity operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersShortIdActivity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1UsersShortIdActivityParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersShortIdActivity(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersShortIdInsights operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersShortIdInsights(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersShortIdInsights(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/me", wrapper.GetApiV1Me)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/note/{shortId}/draft", wrapper.DeleteApiV1NoteShortIdDraft)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/note/{shortId}/draft", wrapper.PutApiV1NoteShortIdDraft)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notes", wrapper.GetApiV1Notes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notes", wrapper.PostApiV1Notes)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.DeleteApiV1NotesShortId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.GetApiV1NotesShortId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.PutApiV1NotesShortId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tags", wrapper.GetApiV1Tags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{shortId}", wrapper.GetApiV1UsersShortId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{shortId}/activity", wrapper.GetApiV1UsersShortIdActivity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{shortId}/insights", wrapper.GetApiV1UsersShortIdInsights)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZTW/bOBP+KwTf92hY6faW06YboAjQNkWT9rCLHsbSWGIjkQw5dFYN/N8XpCR/UrKt",
	"Jt12e4v5NZxnnpl5qDzyVFVaSZRk+fkjt2mBFYQ/ISWxEFRfy0sg9CPaKI2GBIb5VDlJ/g+qNfJzLiRh",
	"joYvJzxrN7QzloyQOV8uJ92Imn3BlPzSVElCSd6ILWYKTHaSpWbkKEtZv4HO1dcGdOEHBGEVZv5vcM7P",
	"+f+SNUxJi1GyA9DaJhgDtf9dgqVPwgrC7OhTI4BETq7Uc50sXTVDcz1/p6gBZxf0GLZSxRkSDEbiM+Gp",
	"QSDMLgZnX9WHfHK24UEB9tLAfPO0mVIlgvSzBudoUKZ4ECPvyIf16uWE20IZusqi1yTI7Rb8+yt20CVB",
	"JUZXOp0NANLOHgtIX4yupHZ0WqCezse+S70RMfIM4n6ihVVE3wh5FzGlnEmxx3uTI40xZfftlELe2aPT",
	"df/isTqABIcO0pALCSSUfOtXh4tmeNpFQoz27PeBcINg0uIDWldG2LYyerT1p/I8dt+dNac0nwLsO/yb",
	"3kOO8bqjt2c2tvqZG/G1Z9aAzON8tMpQUwSiU5fCYOp9OZKxBPm+x3OD9w5lWve33Ov5ezB9FWMBpTs2",
	"O0O52sd8sDlgBaKMzsxdWUqo4tCVIHMHfbgOVZsCe470t++x1+fsRSsa4iIkGrgJT0uBsu96zfk9kwab",
	"4nYb10m+lFZoCSo9woenSfAtVJ4t0f2QkHPVtTtIw8VbLnEoNZo7Uabi99wPTVNVBdGINjVCN5Hh1yYH",
	"Kb4iq5UzjArl8oIsm9XswQgSMme+WtkJc7pUkPmBuSj9gIWF/zVT6q4Cc2cZyIzZUCb9OIIVZc2UZCBr",
	"luFCpMgeBBUM2MyoB4tmyviElyJFaUMkG97xt1e3fMKd8U4URNqeJ4nSKJuwT5XJk3ZTUglKNronvy2Q",
	"/elKYBda8wlfoLGNmy+mZ9OzQC2NErTg5/zl9Gz6kvu6RUWIaAJaJIsXSUP+tkd6EoQoeDby10gXWnx6",
	"8RZ5IKJW0jYE+e3sbEd2gNalSMPe5Itt0qAJ7pGCZy9WNy5N0dq5K1lnO/DCuqoCUzf3Y1QgA0cFSvLm",
	"MWMrAdV56EOaPLYFYplknczMsMRGuGy7fRnGg+deQ980Gxt16gE0UCGhsfz8r0cu/FU9qHzSRbQrRR6z",
	"eyeMV/hkHE42ANlN1M/fCPBu6xoDZ+M3gyYHWMDJp4b/yTqnfOtzEa68d/QvIHbv0NIrldVPxsa1yA4Y",
	"bt9n+QNE6QYW2MZGzdtgdVGy6zDt8N8eTPLmuRiP1r1DU6/Ddc+HAjOJbwpSKrJv41navzEorTGbW7k1",
	"4r7bamzEAeHdtbnv2AfYNxeDQ/zeUvejSPhGWGoYFwqCsrGKoOw2s366dD38qhmD3R9BG/vMxQfWHrOT",
	"rOtudUKfsjerKvqL9Chf9jb60uHy9twI9VQCLyW7ZjgAR89upena0a2B9M5bGTzi8w/JeK/TohE7qCS+",
	"D6d/QRXxMXyOjEVloxZ1Xw4HE+u2aXNHyIZw7xHpMyw3vpXyRz1xCWJ9euyTxSO2ibN/sezU/EHIP/r1",
	"P3q1f74nH4Qnnift1eUQjqv/75wE6OpLxnduEv9dffzcTNr5mjWaV4FVK84MEUtIK/KC7EnEuuo2/YwZ",
	"u/7f62h4V0ewFXzL5XL5TwAAAP//KXqqk8EeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
