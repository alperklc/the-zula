// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ActivityOnDate defines model for activityOnDate.
type ActivityOnDate struct {
	Count *int    `json:"count,omitempty"`
	Date  *string `json:"date,omitempty"`
}

// ContentOnDashboard defines model for contentOnDashboard.
type ContentOnDashboard struct {
	Count *int    `json:"count,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Dashboard defines model for dashboard.
type Dashboard struct {
	ActivityGraph *[]ActivityOnDate     `json:"activityGraph,omitempty"`
	LastVisited   *[]ContentOnDashboard `json:"lastVisited,omitempty"`
	MostVisited   *[]ContentOnDashboard `json:"mostVisited,omitempty"`
	NumberOfNotes *int                  `json:"numberOfNotes,omitempty"`
}

// Note defines model for note.
type Note struct {
	Content    *string         `json:"content,omitempty"`
	CreatedAt  *string         `json:"createdAt,omitempty"`
	CreatedBy  *User           `json:"createdBy,omitempty"`
	HasDraft   *bool           `json:"hasDraft,omitempty"`
	References *NoteReferences `json:"references,omitempty"`
	ShortId    *string         `json:"shortId,omitempty"`
	Tags       *[]string       `json:"tags,omitempty"`
	Title      *string         `json:"title,omitempty"`
	UpdatedAt  *string         `json:"updatedAt,omitempty"`
	UpdatedBy  *User           `json:"updatedBy,omitempty"`
}

// NoteInput defines model for noteInput.
type NoteInput struct {
	Content *string   `json:"content,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Title   *string   `json:"title,omitempty"`
}

// NoteLite defines model for noteLite.
type NoteLite struct {
	ShortId *string `json:"shortId,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// NoteReferenceLink defines model for noteReferenceLink.
type NoteReferenceLink struct {
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// NoteReferences defines model for noteReferences.
type NoteReferences struct {
	Links *[]NoteReferenceLink `json:"links,omitempty"`
	Meta  *PaginationMeta      `json:"meta,omitempty"`
	Nodes *[]NoteLite          `json:"nodes,omitempty"`
}

// NoteSearchResult defines model for noteSearchResult.
type NoteSearchResult struct {
	Items *[]Note         `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// PaginationMeta defines model for paginationMeta.
type PaginationMeta struct {
	Count         *int    `json:"count,omitempty"`
	HasNextPage   *bool   `json:"hasNextPage,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Range         *string `json:"range,omitempty"`
	SortBy        *string `json:"sortBy,omitempty"`
	SortDirection *string `json:"sortDirection,omitempty"`
}

// Tag defines model for tag.
type Tag struct {
	Frequency    *int    `json:"frequency,omitempty"`
	TypeOfParent *string `json:"typeOfParent,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// User defines model for user.
type User struct {
	CreatedAt   *string `json:"createdAt,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Email       *string `json:"email,omitempty"`
	FirstName   *string `json:"firstName,omitempty"`
	Language    *string `json:"language,omitempty"`
	LastName    *string `json:"lastName,omitempty"`
	ShortId     *string `json:"shortId,omitempty"`
	Theme       *string `json:"theme,omitempty"`
}

// UserActivity defines model for userActivity.
type UserActivity struct {
	Action       *string `json:"action,omitempty"`
	ClientId     *string `json:"clientId,omitempty"`
	ObjectId     *string `json:"objectId,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Timestamp    *string `json:"timestamp,omitempty"`
}

// UserActivityResult defines model for userActivityResult.
type UserActivityResult struct {
	Items *[]UserActivity `json:"items,omitempty"`
	Meta  *PaginationMeta `json:"meta,omitempty"`
}

// UserInput defines model for userInput.
type UserInput struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	Email     *string `json:"email,omitempty"`
	Fullname  *string `json:"fullname,omitempty"`
	Language  *string `json:"language,omitempty"`
	Theme     *string `json:"theme,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// GetNotesParams defines parameters for GetNotes.
type GetNotesParams struct {
	Q             *string   `form:"q,omitempty" json:"q,omitempty"`
	Page          *int      `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int      `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string   `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string   `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Tags          *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetNoteParams defines parameters for GetNote.
type GetNoteParams struct {
	LoadDraft      *bool `form:"loadDraft,omitempty" json:"loadDraft,omitempty"`
	OptOutTracking *bool `form:"optOutTracking,omitempty" json:"optOutTracking,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// GetUserActivityParams defines parameters for GetUserActivity.
type GetUserActivityParams struct {
	Page          *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortBy        *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortDirection *string `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// CreateNoteJSONRequestBody defines body for CreateNote for application/json ContentType.
type CreateNoteJSONRequestBody = NoteInput

// UpdateNoteJSONRequestBody defines body for UpdateNote for application/json ContentType.
type UpdateNoteJSONRequestBody = NoteInput

// SaveNoteDraftJSONRequestBody defines body for SaveNoteDraft for application/json ContentType.
type SaveNoteDraftJSONRequestBody = NoteInput

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List notes
	// (GET /api/v1/notes)
	GetNotes(w http.ResponseWriter, r *http.Request, params GetNotesParams)
	// Create a new note
	// (POST /api/v1/notes)
	CreateNote(w http.ResponseWriter, r *http.Request)
	// Delete a note by shortId
	// (DELETE /api/v1/notes/{shortId})
	DeleteNote(w http.ResponseWriter, r *http.Request, shortId string)
	// Get a note by shortId
	// (GET /api/v1/notes/{shortId})
	GetNote(w http.ResponseWriter, r *http.Request, shortId string, params GetNoteParams)
	// Update a note by shortId
	// (PUT /api/v1/notes/{shortId})
	UpdateNote(w http.ResponseWriter, r *http.Request, shortId string)
	// Delete a notes draft by note shortId
	// (DELETE /api/v1/notes/{shortId}/draft)
	DeleteNoteDraft(w http.ResponseWriter, r *http.Request, shortId string)
	// Save draft of a note by notes shortId
	// (PUT /api/v1/notes/{shortId}/draft)
	SaveNoteDraft(w http.ResponseWriter, r *http.Request, shortId string)
	// Get tags
	// (GET /api/v1/tags)
	GetTags(w http.ResponseWriter, r *http.Request, params GetTagsParams)
	// Get a user by ID
	// (GET /api/v1/users/{shortId})
	GetUser(w http.ResponseWriter, r *http.Request, shortId string)
	// Update a user by ID
	// (PUT /api/v1/users/{shortId})
	UpdateUser(w http.ResponseWriter, r *http.Request, shortId string)
	// Get user activity
	// (GET /api/v1/users/{shortId}/activity)
	GetUserActivity(w http.ResponseWriter, r *http.Request, shortId string, params GetUserActivityParams)
	// Get dashboard insights
	// (GET /api/v1/users/{shortId}/insights)
	GetInsights(w http.ResponseWriter, r *http.Request, shortId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List notes
// (GET /api/v1/notes)
func (_ Unimplemented) GetNotes(w http.ResponseWriter, r *http.Request, params GetNotesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new note
// (POST /api/v1/notes)
func (_ Unimplemented) CreateNote(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a note by shortId
// (DELETE /api/v1/notes/{shortId})
func (_ Unimplemented) DeleteNote(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a note by shortId
// (GET /api/v1/notes/{shortId})
func (_ Unimplemented) GetNote(w http.ResponseWriter, r *http.Request, shortId string, params GetNoteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a note by shortId
// (PUT /api/v1/notes/{shortId})
func (_ Unimplemented) UpdateNote(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notes draft by note shortId
// (DELETE /api/v1/notes/{shortId}/draft)
func (_ Unimplemented) DeleteNoteDraft(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Save draft of a note by notes shortId
// (PUT /api/v1/notes/{shortId}/draft)
func (_ Unimplemented) SaveNoteDraft(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tags
// (GET /api/v1/tags)
func (_ Unimplemented) GetTags(w http.ResponseWriter, r *http.Request, params GetTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user by ID
// (GET /api/v1/users/{shortId})
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user by ID
// (PUT /api/v1/users/{shortId})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user activity
// (GET /api/v1/users/{shortId}/activity)
func (_ Unimplemented) GetUserActivity(w http.ResponseWriter, r *http.Request, shortId string, params GetUserActivityParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get dashboard insights
// (GET /api/v1/users/{shortId}/insights)
func (_ Unimplemented) GetInsights(w http.ResponseWriter, r *http.Request, shortId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetNotes operation middleware
func (siw *ServerInterfaceWrapper) GetNotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNote operation middleware
func (siw *ServerInterfaceWrapper) CreateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNote(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNote(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNote operation middleware
func (siw *ServerInterfaceWrapper) GetNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNoteParams

	// ------------- Optional query parameter "loadDraft" -------------

	err = runtime.BindQueryParameter("form", true, false, "loadDraft", r.URL.Query(), &params.LoadDraft)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "loadDraft", Err: err})
		return
	}

	// ------------- Optional query parameter "optOutTracking" -------------

	err = runtime.BindQueryParameter("form", true, false, "optOutTracking", r.URL.Query(), &params.OptOutTracking)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "optOutTracking", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNote(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNote(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNoteDraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteNoteDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNoteDraft(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SaveNoteDraft operation middleware
func (siw *ServerInterfaceWrapper) SaveNoteDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SaveNoteDraft(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserActivity operation middleware
func (siw *ServerInterfaceWrapper) GetUserActivity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserActivityParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortDirection", r.URL.Query(), &params.SortDirection)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDirection", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserActivity(w, r, shortId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInsights operation middleware
func (siw *ServerInterfaceWrapper) GetInsights(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", chi.URLParam(r, "shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInsights(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notes", wrapper.GetNotes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notes", wrapper.CreateNote)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.DeleteNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.GetNote)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notes/{shortId}", wrapper.UpdateNote)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notes/{shortId}/draft", wrapper.DeleteNoteDraft)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notes/{shortId}/draft", wrapper.SaveNoteDraft)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tags", wrapper.GetTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{shortId}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/users/{shortId}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{shortId}/activity", wrapper.GetUserActivity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{shortId}/insights", wrapper.GetInsights)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZTW/bOBD9KwJ3j4KVbm8+bboBggBpUjTpHnbRw1gaS6wlkiFHzqqB/vuClPxNybZq",
	"B/24JaTI4bx582ZIv7BYFkoKFGTY+IWZOMMC3J8QE59zqu7FFRDaEaWlQk0c3XwsS0H2D6oUsjHjgjBF",
	"zeqQJe2CdsaQ5iJldR0uRuTkC8ZkP42lIBRkjZhsIkEnR1lqRg6ylHQbWLh6rUFldoATFm7md41TNma/",
	"RSuYohajaAuglU3QGir7fw6G/uaGEyYH7+oBxLNzIc+1syiLCer76Z2kBpxt0H3YCulniDPoiU/IYo1A",
	"mFz2zr6r9vlUmoYHGZgrDdP13SZS5gjCzmqcokYR416MrCMfV1/XITOZ1HSTeI9JkJoN+He/2EKXOOXo",
	"/bJUSQ8g7eyhgHTF6Eaoko4L1Ol87DrULfeRpxf3Iy0sI3rLxcxjSpY6xg7vdYo0xJTZtZNzMTMHp+vu",
	"wX06gAT7NlKQcgHEpXhvv3YHTfC4g7gY7djvAuEBQcfZRzRl7mHb0ujB1k/lue+8W98cU3wyMHf4H32A",
	"FP26ozZn1pbamQf+tWNWg0j9fDRSUyMC3qkrrjG2vhzIWIJ01+OpxqcSRVx1l9z76QfQXYoxh7w8NDud",
	"XO1i3lscEm5UDtUdFH6MsACee2emXBvqXJeDSEtIuyZ7VvZqVYbFMWhctl2Fv0vxRjZkcc5RdJ2g2b9j",
	"UmOjfo/+RspqbYGGoFADfDiNAmygckYlsHa6CmQvIXsIV+a5GMS3Lto0x+zYc9crO8TFVC6qPMTOhfbE",
	"DHKFesbzmP+Z2qFRLAuXYmhizVXDN3avUxD8KwaVLHVAmSzTjEwwqYJnzYmLNLAibcKgVLmExA5MeW4H",
	"DMztfxMpZwXomQlAJIFx1cGOIxieV4EUAYgqSHDOYwyeOWUBBBMtnw3qUcBClvMYhXEeN56z9zePLGSl",
	"tk5kRMqMo0gqFA2ZR1KnUbsoKjhFa00De8ww+KfMIbhUioVsjto0br4ZXYwuXMIoFKA4G7O3o4vRW2bl",
	"mjJHhAgUj+ZvXFVyA213YMni6GXTjF0jNe2zXamhQEJt2PjfF8atoacSdcXChS9PLGzvXd6Q+he50uJZ",
	"t9amdy90lWfI4rb8DDjvZnUasIHrQ9fXHdqQ1p+dyikpTBOyPy4utppeUCrnsYtf9MU0GrsytK872eh2",
	"XMZtps9DGcdozLTMg8U5XKqasihAV2zMbrmhJodcbyCNh1N/OQmytGLWn6cSDb2TSXVSVxr5cz5YE1zb",
	"6yXpEuszYzgMtwaTAAKBz0G7TbiZo9FLW5xre4wEc2wuG5vgXrnxFlxfyloBWCNzW++3Ueqj9beycLu7",
	"HIJX46bFSxJa/V44Uoe9QnY2UDpy3VaR5jof9iHQsVoqui/pUUM8s1Z6t/j8XfL6GskfpLY52QzSJ/c2",
	"cH7y/mCSc4qEaaD1xaJbZ6Jk8RC1X20WJP9FJMcEDhsLpAN0H7MfYP5aMP2C5LbotgGR0zWON5HyMX3x",
	"FthVKx6bHu2Antedf0Bl6O+Vv5XwB11HCXxN5kCVd4iuQ2xvd1tNSxfanwzq71Y7DnijHlwY7XpL1Jur",
	"PTXx/AidXjZWrxCv3IYPj8qySq4HppvTyx/O9pF7+ejzyu3nz3u3PndWbz38Dc5xR6QlTfq4xIXhaUa9",
	"Zelm8c2PKJarn60Ho7ncIliiVdd1/X8AAAD//yvFmCH8HwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
